// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NaviatePage.Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NaviatePage.Migrations
{
    [DbContext(typeof(QuanLyKhoContext))]
    [Migration("20241022053016_Add_Food_table")]
    partial class Add_Food_table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NaviatePage.Models.Data.Customer", b =>
                {
                    b.Property<int>("Idcustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idcustomer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Idcustomer"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime?>("Contractdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("contractdate");

                    b.Property<string>("Displayname")
                        .HasColumnType("text")
                        .HasColumnName("displayname");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("Moreinfo")
                        .HasColumnType("text")
                        .HasColumnName("moreinfo");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.HasKey("Idcustomer")
                        .HasName("pk_customer");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Food", b =>
                {
                    b.Property<int>("Foodid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("foodid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Foodid"));

                    b.Property<decimal?>("Discount")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("discount");

                    b.Property<string>("Displayname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("displayname");

                    b.Property<string>("Imagepath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("imagepath");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.HasKey("Foodid")
                        .HasName("food_pkey");

                    b.ToTable("food", (string)null);
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Input", b =>
                {
                    b.Property<string>("Idinput")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("idinput");

                    b.Property<DateTime?>("Dateinput")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateinput");

                    b.HasKey("Idinput")
                        .HasName("pk_input");

                    b.ToTable("input", (string)null);
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Inputinfo", b =>
                {
                    b.Property<string>("Idinputinfo")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("idinputinfo");

                    b.Property<int?>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<string>("Idinput")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("idinput");

                    b.Property<string>("Idmaterial")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("idmaterial");

                    b.Property<double?>("Inputprice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("inputprice")
                        .HasDefaultValueSql("0");

                    b.Property<double?>("Outputprice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("outputprice")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Idinputinfo")
                        .HasName("pk_inputinfo");

                    b.HasIndex("Idinput");

                    b.HasIndex("Idmaterial");

                    b.ToTable("inputinfo", (string)null);
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Material", b =>
                {
                    b.Property<string>("Idmaterial")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("idmaterial");

                    b.Property<string>("Barcode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<string>("Displayname")
                        .HasColumnType("text")
                        .HasColumnName("displayname");

                    b.Property<int>("Idsupplier")
                        .HasColumnType("integer")
                        .HasColumnName("idsupplier");

                    b.Property<int>("Idunit")
                        .HasColumnType("integer")
                        .HasColumnName("idunit");

                    b.Property<string>("Qrcode")
                        .HasColumnType("text")
                        .HasColumnName("qrcode");

                    b.HasKey("Idmaterial")
                        .HasName("pk_material");

                    b.HasIndex("Idsupplier");

                    b.HasIndex("Idunit");

                    b.ToTable("material", (string)null);
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Output", b =>
                {
                    b.Property<string>("Idoutput")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("idoutput");

                    b.Property<DateTime?>("Dateoutput")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateoutput");

                    b.HasKey("Idoutput")
                        .HasName("pk_output");

                    b.ToTable("output", (string)null);
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Outputinfo", b =>
                {
                    b.Property<string>("Idoutputinfo")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("idoutputinfo");

                    b.Property<int?>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("Idcustomer")
                        .HasColumnType("integer")
                        .HasColumnName("idcustomer");

                    b.Property<string>("Idmaterial")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("idmaterial");

                    b.Property<string>("Idoutput")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("idoutput");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Idoutputinfo")
                        .HasName("pk_outputinfo");

                    b.HasIndex("Idcustomer");

                    b.HasIndex("Idmaterial");

                    b.HasIndex("Idoutput");

                    b.ToTable("outputinfo", (string)null);
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Supplier", b =>
                {
                    b.Property<int>("Idsupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idsupplier");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Idsupplier"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime?>("Contractdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("contractdate");

                    b.Property<string>("Displayname")
                        .HasColumnType("text")
                        .HasColumnName("displayname");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("Moreinfo")
                        .HasColumnType("text")
                        .HasColumnName("moreinfo");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.HasKey("Idsupplier")
                        .HasName("pk_supplier");

                    b.ToTable("supplier", (string)null);
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Unit", b =>
                {
                    b.Property<int>("Idunit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idunit");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Idunit"));

                    b.Property<string>("Displayname")
                        .HasColumnType("text")
                        .HasColumnName("displayname");

                    b.HasKey("Idunit")
                        .HasName("pk_unit");

                    b.ToTable("unit", (string)null);
                });

            modelBuilder.Entity("NaviatePage.Models.Data.User", b =>
                {
                    b.Property<int>("Iduser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("iduser");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Iduser"));

                    b.Property<string>("Displayname")
                        .HasColumnType("text")
                        .HasColumnName("displayname");

                    b.Property<int>("Iduserrole")
                        .HasColumnType("integer")
                        .HasColumnName("iduserrole");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Iduser")
                        .HasName("pk_users");

                    b.HasIndex("Iduserrole");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Userrole", b =>
                {
                    b.Property<int>("Iduserrole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("iduserrole");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Iduserrole"));

                    b.Property<string>("Displayname")
                        .HasColumnType("text")
                        .HasColumnName("displayname");

                    b.HasKey("Iduserrole")
                        .HasName("pk_userrole");

                    b.ToTable("userrole", (string)null);
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Inputinfo", b =>
                {
                    b.HasOne("NaviatePage.Models.Data.Input", "IdinputNavigation")
                        .WithMany("Inputinfos")
                        .HasForeignKey("Idinput")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("inputinfo_idinput_fkey");

                    b.HasOne("NaviatePage.Models.Data.Material", "IdmaterialNavigation")
                        .WithMany("Inputinfos")
                        .HasForeignKey("Idmaterial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("inputinfo_idmaterial_fkey");

                    b.Navigation("IdinputNavigation");

                    b.Navigation("IdmaterialNavigation");
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Material", b =>
                {
                    b.HasOne("NaviatePage.Models.Data.Supplier", "IdsupplierNavigation")
                        .WithMany("Materials")
                        .HasForeignKey("Idsupplier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("material_idsupplier_fkey");

                    b.HasOne("NaviatePage.Models.Data.Unit", "IdunitNavigation")
                        .WithMany("Materials")
                        .HasForeignKey("Idunit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("material_idunit_fkey");

                    b.Navigation("IdsupplierNavigation");

                    b.Navigation("IdunitNavigation");
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Outputinfo", b =>
                {
                    b.HasOne("NaviatePage.Models.Data.Customer", "IdcustomerNavigation")
                        .WithMany("Outputinfos")
                        .HasForeignKey("Idcustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("outputinfo_idcustomer_fkey");

                    b.HasOne("NaviatePage.Models.Data.Material", "IdmaterialNavigation")
                        .WithMany("Outputinfos")
                        .HasForeignKey("Idmaterial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("outputinfo_idmaterial_fkey");

                    b.HasOne("NaviatePage.Models.Data.Output", "IdoutputNavigation")
                        .WithMany("Outputinfos")
                        .HasForeignKey("Idoutput")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("outputinfo_idoutput_fkey");

                    b.Navigation("IdcustomerNavigation");

                    b.Navigation("IdmaterialNavigation");

                    b.Navigation("IdoutputNavigation");
                });

            modelBuilder.Entity("NaviatePage.Models.Data.User", b =>
                {
                    b.HasOne("NaviatePage.Models.Data.Userrole", "IduserroleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Iduserrole")
                        .IsRequired()
                        .HasConstraintName("users_iduserrole_fkey");

                    b.Navigation("IduserroleNavigation");
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Customer", b =>
                {
                    b.Navigation("Outputinfos");
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Input", b =>
                {
                    b.Navigation("Inputinfos");
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Material", b =>
                {
                    b.Navigation("Inputinfos");

                    b.Navigation("Outputinfos");
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Output", b =>
                {
                    b.Navigation("Outputinfos");
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Supplier", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Unit", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("NaviatePage.Models.Data.Userrole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
